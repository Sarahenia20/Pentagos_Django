# Generated by Django 5.2.6 on 2025-10-14 15:25

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Artwork',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('generation_type', models.CharField(choices=[('ai_prompt', 'AI Prompt (Gemini/GPT-4o)'), ('algorithmic', 'Algorithmic/Procedural'), ('hybrid', 'Hybrid (AI + Algorithmic)')], default='ai_prompt', max_length=20)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='queued', max_length=20)),
                ('prompt', models.TextField(blank=True, help_text='Text prompt for AI generation')),
                ('ai_provider', models.CharField(choices=[('gemini', 'Google Gemini 2.5 Flash'), ('gpt4o', 'OpenAI GPT-4o'), ('none', 'None (Algorithmic only)')], default='gemini', max_length=20)),
                ('algorithm_name', models.CharField(blank=True, help_text="e.g., 'fractal', 'flow_field', 'geometric'", max_length=100)),
                ('algorithm_params', models.JSONField(blank=True, default=dict, help_text='Parameters for algorithmic generation')),
                ('image', models.ImageField(blank=True, null=True, upload_to='artworks/%Y/%m/%d/')),
                ('image_size', models.CharField(default='1024x1024', max_length=20)),
                ('generation_started_at', models.DateTimeField(blank=True, null=True)),
                ('generation_completed_at', models.DateTimeField(blank=True, null=True)),
                ('celery_task_id', models.CharField(blank=True, max_length=255)),
                ('error_message', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=True)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artworks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('artworks', models.ManyToManyField(blank=True, related_name='collections', to='media_processing.artwork')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ArtworkTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('artwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artwork_tags', to='media_processing.artwork')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artwork_tags', to='media_processing.tag')),
            ],
            options={
                'ordering': ['tag__name'],
            },
        ),
        migrations.AddIndex(
            model_name='artwork',
            index=models.Index(fields=['-created_at'], name='media_proce_created_74609c_idx'),
        ),
        migrations.AddIndex(
            model_name='artwork',
            index=models.Index(fields=['user', '-created_at'], name='media_proce_user_id_c203d0_idx'),
        ),
        migrations.AddIndex(
            model_name='artwork',
            index=models.Index(fields=['status'], name='media_proce_status_e6146d_idx'),
        ),
        migrations.AddIndex(
            model_name='artwork',
            index=models.Index(fields=['is_public', '-created_at'], name='media_proce_is_publ_179fec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='artworktag',
            unique_together={('artwork', 'tag')},
        ),
    ]
