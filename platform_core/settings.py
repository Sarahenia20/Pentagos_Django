"""
Django settings for platform_core project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-^%y2+^nbux3@n@d5y&rthvrh2vtzywosht6s-_p&mpy9d!%#=n')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# For Render deployment, add *.onrender.com to ALLOWED_HOSTS
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])
# Add Render hostname pattern
if not DEBUG:
    ALLOWED_HOSTS.append('.onrender.com')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders',
    'cloudinary_storage',
    'cloudinary',

    # PentaArt apps
    'accounts',
    'api',
    'dashboard',
    'media_processing',
    'prompt_library',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'platform_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'platform_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL provided by Render, fallback to SQLite for local development
DATABASES = {
    'default': dj_database_url.config(
        # Replace this value with your local database's connection string.
        default='postgresql://postgres:postgres@localhost:5432/pentaart_db',
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploads and generated art)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# PENTAART CONFIGURATION
# =============================================================================

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# CORS Settings (for Next.js frontend)
# CORS settings
# Use explicit allowed origin(s) so Access-Control-Allow-Origin can be set
# correctly when credentials are used. Read FRONTEND_URL from env.
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')
if DEBUG:
    # In dev, restrict CORS to the configured frontend origin to allow cookies
    CORS_ALLOWED_ORIGINS = [FRONTEND_URL]
else:
    CORS_ALLOWED_ORIGINS = config(
        'CORS_ALLOWED_ORIGINS',
        default='http://localhost:3000,http://127.0.0.1:3000',
        cast=lambda v: [s.strip() for s in v.split(',')]
    )

# Allow cookies/credentials over CORS
CORS_ALLOW_CREDENTIALS = True

# Celery Configuration (for async art generation)
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# AI Provider API Keys
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')
GEMINI_API_KEY = config('GEMINI_API_KEY', default='')
# Generative AI service configuration
# Base URL for Google Generative AI (or alternate provider). Defaults to Google's generative API.
GENERATIVE_API_BASE = config('GENERATIVE_API_BASE', default='https://generative.googleapis.com/v1')
# Model name to call (without base). Example: 'gemini-pro' or a full model resource name if needed.
GEMINI_MODEL = config('GEMINI_MODEL', default='gemini-pro')
# Authentication method for generative API: 'key' will append ?key=API_KEY, 'bearer' will use Authorization: Bearer
GEMINI_API_AUTH_METHOD = config('GEMINI_API_AUTH_METHOD', default='key')
HUGGINGFACE_TOKEN = config('HUGGINGFACE_TOKEN', default='')
GROQ_API_KEY = config('GROQ_API_KEY', default='')

# OAuth / Social providers
GITHUB_CLIENT_ID = config('GITHUB_CLIENT_ID', default='')
GITHUB_CLIENT_SECRET = config('GITHUB_CLIENT_SECRET', default='')

# Frontend URL (used to build redirect links)
# FRONTEND_URL is defined near the CORS settings above

# Google OAuth
GOOGLE_CLIENT_ID = config('GOOGLE_CLIENT_ID', default='')
GOOGLE_CLIENT_SECRET = config('GOOGLE_CLIENT_SECRET', default='')

# Cloudinary Configuration (Optional - for cloud image storage)
USE_CLOUDINARY = config('USE_CLOUDINARY', default=False, cast=bool)

if USE_CLOUDINARY:
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME', default=''),
        'API_KEY': config('CLOUDINARY_API_KEY', default=''),
        'API_SECRET': config('CLOUDINARY_API_SECRET', default=''),
    }
    # Use Cloudinary for media storage
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
else:
    # Use local file storage (default)
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Art Generation Settings
MAX_GENERATION_TIME = 300  # 5 minutes timeout
ALLOWED_IMAGE_SIZES = ['512x512', '1024x1024', '1024x1792', '1792x1024']
DEFAULT_IMAGE_SIZE = '1024x1024'

# -------------------- Email settings --------------------
# Support for simple SMTP configuration via environment variables
# Environment keys expected (provided in your .env):
# MAIL_MAILER, MAIL_HOST, MAIL_PORT, MAIL_USERNAME, MAIL_PASSWORD,
# MAIL_ENCRYPTION (tls|ssl|none), MAIL_FROM_ADDRESS, MAIL_FROM_NAME
MAIL_MAILER = config('MAIL_MAILER', default='smtp')
MAIL_HOST = config('MAIL_HOST', default='localhost')
MAIL_PORT = config('MAIL_PORT', default=25, cast=int)
MAIL_USERNAME = config('MAIL_USERNAME', default='')
MAIL_PASSWORD = config('MAIL_PASSWORD', default='')
MAIL_ENCRYPTION = config('MAIL_ENCRYPTION', default='')
MAIL_FROM_ADDRESS = config('MAIL_FROM_ADDRESS', default='webmaster@localhost')
MAIL_FROM_NAME = config('MAIL_FROM_NAME', default='')


if MAIL_MAILER.lower() in ('smtp', 'mail'):
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = MAIL_HOST
    EMAIL_PORT = MAIL_PORT
    EMAIL_HOST_USER = MAIL_USERNAME
    EMAIL_HOST_PASSWORD = MAIL_PASSWORD
    # MAIL_ENCRYPTION: 'tls' or 'ssl'
    if MAIL_ENCRYPTION.lower() == 'tls':
        EMAIL_USE_TLS = True
        EMAIL_USE_SSL = False
    elif MAIL_ENCRYPTION.lower() == 'ssl':
        EMAIL_USE_SSL = True
        EMAIL_USE_TLS = False
    else:
        EMAIL_USE_TLS = False
        EMAIL_USE_SSL = False

    DEFAULT_FROM_EMAIL = f"{MAIL_FROM_NAME} <{MAIL_FROM_ADDRESS}>" if MAIL_FROM_NAME else MAIL_FROM_ADDRESS
else:
    # Fallback to console backend in non-SMTP cases to avoid silent failures in dev
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = MAIL_FROM_ADDRESS
